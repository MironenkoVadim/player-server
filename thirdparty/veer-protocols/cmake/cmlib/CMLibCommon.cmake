cmake_minimum_required(VERSION 3.3 FATAL_ERROR)
cmake_policy(VERSION 3.0.2..3.7)

if(CMAKE_INSTALL_PREFIX STREQUAL PROJECT_BINARY_DIR)
  message(FATAL_ERROR "Cannot install into build directory")
endif()

include(CMLibDisableInSourceBuild)
include(CMakeParseArguments)
include(GNUInstallDirs)
if(DEFINED ENV{DEB_HOST_MULTIARCH})
  string(APPEND CMAKE_INSTALL_LIBDIR "/$ENV{DEB_HOST_MULTIARCH}")
endif()

set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS ${CMAKE_CXX_SOURCE_FILE_EXTENSIONS};tpp;tcc)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

include(CMLibProjectVersion)
set_project_version()

include(CMLibRequiredVariables)
include(CMLibGlobalFunctions)
include(CMLibGlobalVariables)
include(CMLibLSBInfo)
include(CMLibCompiler)
include(CMLibCompilerFlags)
include(CMLibDistCC)
include(CMLibCompilerFeaturesHPPGenerate)
include(CMLibFlagRemove)
include(CMLibCotire)
include(CMLibBuildTypes)
include(CMLibDebugOutput)
include(CMLibCommonTargetProperties)
include(CMLibCommonLibraryTarget)
include(CMLibPkgConfig)
include(CMLibCodeAnalysisPvsStudio)
include(CMLibCodeAnalysisClangAnalyze)
include(CMLibCodeAnalysisClangTidy)
include(CMLibCodeAnalysisClazy)
include(CMLibCodeCoverage)
include(CMLibSanitizers)

include(CMLibFormatSources)
include(CMLibDocDoxygen)
include(CMLibDocBreathe)
include(CMLibQtTranslation)
include(CMLibToday)
include(CMLibAuxilarySymlinks)
include(CMLibConfigHPPGenerate)
include(CMLibNinjaGeneratorHelper)
include(CMLibExternalProject)
include(CMLibCPack)
include(CMLibUninstall)
